@page "/"
@using BotControlPanel.App.Services
@using BotControlPanel.App.Models
@inject BotService _botService

<h1>Control Panel</h1>
<hr/>
<div class="row" id="stats">
    <div class="col-12">
        <h2><span class="oi oi-graph" aria-hidden="true"></span> Stats</h2>
    </div>
    <div class="col-md-12">
        <div id="docker-stats">
            @if (_containerStatuses == null || !_containerStatuses.Any())
            {
                @:<p>Container status has not been fetched or no containers are running.</p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Container ID</th>
                            <th>Image</th>
                            <th>Command</th>
                            <th>Created</th>
                            <th>Status</th>
                            <th>Names</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (var container in _containerStatuses)
                    {
                        <tr>
                            <td>@container.ContainerId</td>
                            <td>@container.Image</td>
                            <td>@container.Command</td>
                            <td>@container.Created</td>
                            <td>@container.Status</td>
                            <td>@container.Names</td>
                            <td>
                                <button class="btn btn-lg btn-danger btn-block" @onclick='() => KillContainer(container.Names)'>Stop @container.Names</button><br/>
                            </td>
                        </tr>
                    }   
                    </tbody>
                </table>
            }
            <br/>
            Last fetch: @(_lastFetch == null ? "Never" : _lastFetch.Value)
        </div>
        <button class="btn btn-lg btn-primary" @onclick="GetStats">Get Stats</button><br/>
        <hr/>        
    </div>
</div>
<div class="row" id="commands">
    <div class="col-12">
        <h2><span class="oi oi-command" aria-hidden="true"></span> Commands</h2>
    </div>
    <div class="col-md-6">
        <h3>Stop Bot Instances</h3>
        <button class="btn btn-lg btn-danger btn-block" @onclick="KillContainers">Stop All</button><br/>
        <button class="btn btn-lg btn-danger btn-block" @onclick='() => KillContainer("colorbot")'>Stop ColorBot</button><br/>
        <button class="btn btn-lg btn-danger btn-block" @onclick='() => KillContainer("docbot")'>Stop DocBot</button><br/>
        <button class="btn btn-lg btn-danger btn-block" @onclick='() => KillContainer("dogbot")'>Stop DogBot</button><br/>
        <button class="btn btn-lg btn-danger btn-block" @onclick='() => KillContainer("meltybot")'>Stop MeltyBot</button><br/>
    </div>
    <div class="col-md-6">
        <h3>Start Bot Instances</h3>
        <button class="btn btn-lg btn-success btn-block" @onclick="StartAllContainers">Start All</button><br/>
        <button class="btn btn-lg btn-success btn-block" @onclick='() => StartContainer("colorbot")'>Start ColorBot</button><br/>
        <button class="btn btn-lg btn-success btn-block" @onclick='() => StartContainer("docbot")'>Start DocBot</button><br/>
        <button class="btn btn-lg btn-success btn-block" @onclick='() => StartContainer("dogbot")'>Start DogBot</button><br/>
        <button class="btn btn-lg btn-success btn-block" @onclick='() => StartContainer("meltybot")'>Start MeltyBot</button><br/>
    </div>
</div>
@if (_locked)
{
    <div style="background: black; position: absolute; top: 0; right: 0; bottom: 0; left: 0; z-index: 100;">
        <p style="font-size: xxx-large">Please wait...</p>
    </div>
}

@code
{
    private List<ContainerStatus> _containerStatuses = new List<ContainerStatus>();
    private DateTime? _lastFetch;
    private bool _locked;

    protected override async Task OnInitializedAsync()
    {
        GetStats();
    }
    
    private void GetStats()
    {
        _containerStatuses = _botService.GetDockerStats();
        _lastFetch = DateTime.Now;
    }
    
    private void KillContainer(string name)
    {
        if (_locked) return;
        
        _locked = true;
        _botService.KillContainer(name);
        GetStats();
        _locked = false;
    }
    
    private void KillContainers()
    {
        if (_locked) return;
        
        _locked = true;
        _botService.KillAllContainers();
        GetStats();
        _locked = false;
    }

    private void StartContainer(string name)
    {
        if (_locked) return;
        
        _locked = true;
        _botService.RunImage(name);
        GetStats();
        _locked = false;
    }

    private void StartAllContainers()
    {
        if (_locked) return;
        
        _locked = true;
        _botService.RunImage("colorbot");
        _botService.RunImage("docbot");
        _botService.RunImage("dogbot");
        _botService.RunImage("meltybot");
        GetStats();
        _locked = false;
    }
}
